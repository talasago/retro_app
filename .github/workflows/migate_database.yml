name: migrate_database

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  migrate:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Read python version from .python-version
        id: python_version
        run: echo "python_version=$(cat .python-version)" >> $GITHUB_OUTPUT

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ steps.python_version.outputs.python_version }}
          # cache: pip

      - name: Install pipenv
        run: pip install pipenv

      - name: install dependencies
        run: pipenv sync

      - name: Assume role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ vars.DB_MIGRATE_IAM_ROLE_NAME }}
          aws-region: ap-northeast-1

      - name: Get firewall JSON
        run: aws lightsail get-instance-port-states --instance-name ${{ vars.DB_INSTANCE_NAME }} --output json |
             jq -r '.portStates' |sed '/state/d' > org_firewall.json
             # stateとportStatesを消さないと更新用のjsonにならない

      - name: Put updated firewall configuration
        run: |
          current_ip=$(curl http://checkip.amazonaws.com/)
          jq '. += [{"protocol": "tcp", "fromPort": 5432, "toPort": 5432, "cidrs": ["'"${current_ip}"'/32"]}]' org_firewall.json > firewall.json
          aws lightsail put-instance-public-ports --instance-name ${{ vars.DB_INSTANCE_NAME }} --port-infos file://firewall.json

      - name: Setup tmate session
        uses: mxschmitt/action-tmate@v3
        if: ${{ github.event_name == 'workflow_dispatch' }}
        timeout-minutes: 15
        with:
          sudo: true
          limit-access-to-actor: true

      - name: migrate database
        run: pipenv run alembic upgrade head
        env:
          # TODO:本番環境と開発環境で環境変数を分ける必要あり。
          # host以外はssm見ても良い気がする。
          POSTGRES_HOST: ${{secrets.POSTGRES_HOST}}
          POSTGRES_USER: ${{secrets.POSTGRES_USER}}
          POSTGRES_PASSWORD: ${{secrets.POSTGRES_PASSWORD}}
          POSTGRES_DATABASE: ${{secrets.POSTGRES_DATABASE}}

      # TODO:migrate失敗してもこれは実行したい
      - name: Put original firewall configuration
        run: aws lightsail put-instance-public-ports --instance-name  ${{ vars.DB_INSTANCE_NAME }}  --port-infos file://org_firewall.json
