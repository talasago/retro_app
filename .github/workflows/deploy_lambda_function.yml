name: deploy_lambda_function

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    name: Set up

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Read Node.js version from .nvmrc
      id: nvmrc
      run: echo "::set-output name=node_version::$(cat .nvmrc)"

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: ${{ steps.nvmrc.outputs.node_version }}

    - name: Install dependencies
      run: npm ci

    - name: Cache dependencies
      uses: actions/cache@v2
      with:
        path: ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Read python version from .python-version
      id: python_version
      run: echo "::set-output name=python_version::$(cat .python-version)"

    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: ${{ steps.python-version.outputs.python_version }}
        cache: pip

    - name: Install pipenv
      run: pip install pipenv

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      with:
        platforms: linux/arm64

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        platforms: linux/arm64

    - name: deploy lambda function
      # FIXME: 別ジョブか別ワークフローにしたい。set upの次に行いたい。
      run: |
        cd ./infra/
        pipenv requirements > requirements.txt
        npx sls package
      # TODO:sls deploy時のrequirements.txtからの内容のライブラリインストールを、キャッシュ化したいなあ
  # packageは仮のコマンド。
  # awsへの認証情報を考える。
