service: retro-app
frameworkVersion: '>=4.0.0 <5.0.0'

plugins:
  - serverless-python-requirements
  - serverless-api-gateway-throttling

custom:
  pythonRequirements:
    # 2023/9/10時点でtrueに変更し手もデプロイできない問題あり。修正されているがリリースされていない模様。
    # https://github.com/serverless/serverless-python-requirements/pull/780
    usePipenv: false
    pipCmdExtraArgs:
      - '--platform'
      - 'manylinux2014_aarch64'
      #- '--implementation'
      #- 'cp'
      #- '--python-version'
      #- '3.10'
      - '--only-binary=:all:'
    #dockerizePip: true
    #useDownloadCache: true
    #useStaticCache: true
    #cacheLocation: ./.serverless/.requirements_cache
    # 多分これが無いと、amd64(x86_64)の上でarm64用のLambdaをデプロイ/ビルド使用とするのでエラーになる
    dockerBuildCmdExtraArgs: ['--platforms', 'linux/arm64']
  apiGatewayThrottling:
    maxRequestsPerSecond: 10
    maxConcurrentRequests: 10

package:
  patterns:
    - '!../**'
    # ホワイトリスト方式
    - '../app/**'

provider:
  name: aws
  architecture: arm64
  stage: dev # TODO:オプション引数で変更できるように変更したい
  runtime: python3.10
  region: ap-northeast-1
  timeout: 30 # seconds
  iamRoleStatements:
    - Effect: Allow
      Action:
        - ec2:DescribeInstances # 何で必要なんだっけ...
        - ec2:CreateNetworkInterface # VPC設定のために必要
        - ec2:DescribeNetworkInterfaces # VPC設定のために必要
        - ec2:DeleteNetworkInterface # VPC設定のために必要
        - ssm:GetParameter # SSMから環境変数を取得するために必要
        - kms:DecryptSecureString # SSMから環境変数を取得するために必要
      Resource: "*"
  vpc:
    securityGroupIds:
      - sg-0bf8878f3a1baeba9
    subnetIds:
      # XXX:subnetを3つ使う必要があるかわかってない。
      - subnet-0214fe79fe7b89a1a
      - subnet-0047acbc1ef639c16
      - subnet-0fbe6af2f37be64b1
  environment:
    # TODO:本番環境と開発環境で環境変数を分ける必要あり。
    POSTGRES_HOST: ${ssm:postgres_host}
    POSTGRES_USER: ${ssm:postgres_user}
    POSTGRES_PASSWORD: ${ssm:postgres_password}
    POSTGRES_DATABASE: ${ssm:postgres_database}
    ORIGINS: ${ssm:origins}
  logs:
    # Enable REST API logs
    # This can either be set to `restApi: true` to use defaults, or configured via subproperties
    # Can only be configured if the API is created by Serverless Framework
    restApi:
      accessLogging: true
      # Log format to use for access logs
      # format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp", "requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod","routeKey":"$context.routeKey", "status":"$context.status", "protocol":"$context.protocol", "responseLength":"$context.responseLength" }'
      
      executionLogging: true
      # Log level to use for execution logging
      level: INFO
      # Log full requests/responses for execution logging
      fullExecutionData: false

      # NOTE:ロールは自動で作成されるので、それを使うように設定する
      # Existing IAM role to use for API Gateway when writing CloudWatch Logs (default: automatically created)
      # role: arn:aws:iam::123456:role
      # Whether the API Gateway CloudWatch Logs role setting is not managed by Serverless (default: false)
      roleManagedExternally: false 

functions:
  user_function:
    handler: app.functions.main.handler
    events:
      - http:
          path: /api/v1/sign_up
          method: ANY
      - http:
          path: /token
          method: ANY
      - http:
          path: /refresh_token
          method: ANY
      - http:
          path: /api/v1/logout
          method: ANY
