/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/v1/retrospective_method/{retrospective_method_id}/comment': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * レビューコメントを取得します。
     * @description コメント取得のエンドポイント。
     */
    get: apiOperations['get_comment_api_v1_retrospective_method__retrospective_method_id__comment_get'];
    put?: never;
    /**
     * レビューコメントを登録します。
     * @description コメント登録のエンドポイント。
     */
    post: apiOperations['add_comment_api_v1_retrospective_method__retrospective_method_id__comment_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/sign_up': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * ユーザーを登録します。
     * @description ユーザー登録のAPIエンドポイント
     */
    post: apiOperations['signup_user_api_v1_sign_up_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/token': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * ログインしてトークンを発行します。
     * @description Request bodyのParameters(form_data):
     *       - grant_type: 使用していない
     *       - username: ユーザー名
     *       - password: ユーザーのパスワード
     *       - self.scopes: 使用していない
     *       - client_id: 使用していない
     *       - client_secret: 使用していない
     */
    post: apiOperations['sign_in_api_v1_token_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/refresh_token': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * リフレッシュトークンでトークンを再発行します。
     * @description リフレッシュトークンでトークンを再取得
     */
    post: apiOperations['refresh_token_api_v1_refresh_token_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/v1/logout': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * ログアウトします。
     * @description ログアウトのエンドポイント。リフレッシュトークンを無効化する
     */
    post: apiOperations['logout_api_v1_logout_post'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface apiSchemas {
  schemas: {
    /** AddCommentApiResponseBody */
    AddCommentApiResponseBody: {
      /**
       * Message
       * @description 処理メッセージ
       * @default コメントを登録しました。
       */
      message: string;
    };
    /** Body_sign_in_api_v1_token_post */
    Body_sign_in_api_v1_token_post: {
      /** Grant Type */
      grant_type?: string | null;
      /** Username */
      username: string;
      /** Password */
      password: string;
      /**
       * Scope
       * @default
       */
      scope: string;
      /** Client Id */
      client_id?: string | null;
      /** Client Secret */
      client_secret?: string | null;
    };
    /** ClientErrorResponseBody */
    ClientErrorResponseBody: {
      /**
       * Message
       * @description 処理メッセージ
       */
      message: string;
    };
    /**
     * CommentCreate
     * @description commentAPIのりクエストモデル
     */
    CommentCreate: {
      /**
       * Comment
       * @description コメントの内容
       */
      comment: string;
    };
    /** GetCommentApiResponseBody */
    GetCommentApiResponseBody: {
      /**
       * Comments
       * @description コメントデータ
       */
      comments: [
        {
          comment: string;
          comment_id: number;
          created_at: string;
          retrospective_method_id: number;
          updated_at: string;
          user_uuid: string;
          user_name: string;
        },
      ];
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: Array<apiSchemas['schemas']['ValidationError']>;
    };
    /** LogoutApiResponseBody */
    LogoutApiResponseBody: {
      /**
       * Message
       * @description 処理メッセージ
       * @default ログアウトしました
       */
      message: string;
    };
    /** RefreshTokenApiResponseBody */
    RefreshTokenApiResponseBody: {
      /**
       * Message
       * @description 処理メッセージ
       * @default トークンを再発行しました。
       */
      message: string;
      /**
       * Token Type
       * @description トークンタイプ
       */
      token_type: string;
      /**
       * Access Token
       * @description アクセストークン
       */
      access_token: string;
      /**
       * Refresh Token
       * @description リフレッシュトークン
       */
      refresh_token: string;
    };
    /** SignInApiResponseBody */
    SignInApiResponseBody: {
      /**
       * Message
       * @description 処理メッセージ
       * @default ユーザー登録が成功しました。
       */
      message: string;
    };
    /** TokenApiResponseBody */
    TokenApiResponseBody: {
      /**
       * Message
       * @description 処理メッセージ
       * @default ログインしました
       */
      message: string;
      /**
       * Name
       * @description ユーザー名
       */
      name: string;
      /**
       * Token Type
       * @description トークンタイプ
       */
      token_type: string;
      /**
       * Access Token
       * @description アクセストークン
       */
      access_token: string;
      /**
       * Refresh Token
       * @description リフレッシュトークン
       */
      refresh_token: string;
      /**
       * uid
       * @description uid
       */
      uuid: string;
    };
    /** UserCreate */
    UserCreate: {
      /**
       * Name
       * @description ユーザーの名前
       */
      name: string;
      /**
       * Password
       * Format: password
       * @description ユーザーのパスワード。regex_prttern: ^[0-9a-zA-Z!?_+*\'"`#$%&\-^\\@;:,.\/=~|[\](){}<>]{8,50}$
       */
      password: string;
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: Array<string | number>;
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface apiOperations {
  get_comment_api_v1_retrospective_method__retrospective_method_id__comment_get: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        retrospective_method_id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: Record<string, unknown>;
        content: {
          'application/json': apiSchemas['schemas']['GetCommentApiResponseBody'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: Record<string, unknown>;
        content: {
          'application/json': apiSchemas['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  add_comment_api_v1_retrospective_method__retrospective_method_id__comment_post: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        retrospective_method_id: number;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': apiSchemas['schemas']['CommentCreate'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        headers: Record<string, unknown>;
        content: {
          'application/json': apiSchemas['schemas']['AddCommentApiResponseBody'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: Record<string, unknown>;
        content: {
          'application/json': apiSchemas['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  signup_user_api_v1_sign_up_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': apiSchemas['schemas']['UserCreate'];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        headers: Record<string, unknown>;
        content: {
          'application/json': apiSchemas['schemas']['SignInApiResponseBody'];
        };
      };
      /** @description Conflict */
      409: {
        headers: Record<string, unknown>;
        content: {
          'application/json': apiSchemas['schemas']['ClientErrorResponseBody'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: Record<string, unknown>;
        content: {
          'application/json': apiSchemas['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  sign_in_api_v1_token_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/x-www-form-urlencoded': apiSchemas['schemas']['Body_sign_in_api_v1_token_post'];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        headers: Record<string, unknown>;
        content: {
          'application/json': apiSchemas['schemas']['TokenApiResponseBody'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: Record<string, unknown>;
        content: {
          'application/json': apiSchemas['schemas']['ClientErrorResponseBody'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: Record<string, unknown>;
        content: {
          'application/json': apiSchemas['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  refresh_token_api_v1_refresh_token_post: {
    parameters: {
      query?: never;
      header: {
        /** @description OpenAPIで入力値を指定しても、リクエストヘッダーに含まれないため、cURL等で試してください */
        Authorization: string;
      };
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: Record<string, unknown>;
        content: {
          'application/json': apiSchemas['schemas']['RefreshTokenApiResponseBody'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: Record<string, unknown>;
        content: {
          'application/json': apiSchemas['schemas']['ClientErrorResponseBody'];
        };
      };
      /** @description Validation Error */
      422: {
        headers: Record<string, unknown>;
        content: {
          'application/json': apiSchemas['schemas']['HTTPValidationError'];
        };
      };
    };
  };
  logout_api_v1_logout_post: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successful Response */
      200: {
        headers: Record<string, unknown>;
        content: {
          'application/json': apiSchemas['schemas']['LogoutApiResponseBody'];
        };
      };
    };
  };
}
